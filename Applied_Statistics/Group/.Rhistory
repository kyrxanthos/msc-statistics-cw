par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(1,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
Ns=seq(10,50,1)
dat2 <- rep(NA, length(Ns))
count <- 0
lamda=1
# set.seed(222)
for (N in Ns){
count <- count+1
u <- runif(N)
x <- Q(u)
y <- Q2(u)
# x <- exact(N)
# print(length(x))
# y <- inexact(N) + 1/lamda*log(N)
# print(length(y))
# print('----')
dat2[count] <- ks.test(y,x)$p.value
# dat2[count] <- norm(x-y, type='2')
}
par(mfrow=c(1,1))
plot(Ns, dat2, type='l', ylab='p value', xlab = 'N')
rm(list=ls())  #clear load space
setwd('/Users/lysi2/Documents/UNI_Imperial/Applied_Stats/Assignments/Group')
library(tidyverse)
library(faraway)
library('MASS')
library(car)
library(margins)
dat <- read.csv("data.csv")
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
head(dat)
dat$store_density = cut(dat$stores,c(-1,3,7,10), labels = c('low', 'medium', 'high'))
length(dat$store_density[dat$store_density == 'low'])
length(dat$store_density[dat$store_density == 'medium'])
length(dat$store_density[dat$store_density == 'high'])
sum(is.na(dat))
pairs(dat)
model0 <- lm(price ~ 0+age + log(distance) + stores + lat + lon, data=dat)
summary(model0)
dat <- read.csv("data.csv")
head(dat)
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
boxplot(price)
boxplot(dat$price)
dat <- read.csv("data.csv")
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
head(dat)
par(mfrow = c(1,2))
boxplot(dat$price,xlab = "price",main = "Boxplot of price")
hist(dat$price,xlab = "price",main = "Histgram of price" )
par(mfrow = c(1,2))
boxplot(dat$price,xlab = "price")
hist(dat$price,xlab = "price")
par(mfrow = c(1,2))
boxplot(dat$price,xlab = "price")
hist(dat$price,xlab = "price", main='')
pairs(dat,lower.panel = NULL)
my_sf <- st_as_sf(dat, coords = c('lon','lat'), crs = 4326)
library(ggplot2)
my_sf <- st_as_sf(dat, coords = c('lon','lat'), crs = 4326)
library(sf)
library(sf)
my_sf <- st_as_sf(dat, coords = c('lon','lat'), crs = 4326)
my_sf <- st_as_sf(dat, coords = c('lon','lat'), crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = price))
par(mfrow = c(1,2))
ggplot(my_sf) +geom_sf(aes(color = price))
ggplot(my_sf) +
geom_sf(aes(color = stores))
model0 <- lm(price ~ 0+age + log(distance) + stores + lat + lon, data=dat)
summary(model0)
model0 <- lm(price ~ age + distance + stores + lat + lon, data=dat)
summary(model0)
par(mfrow = c(2,3))
for(k in 1:6){
plot(model1,k)
}
par(mfrow = c(2,3))
for(k in 1:6){
plot(model0,k)
}
model0 <- lm(price ~ age + distance + stores + lat + lon + date, data=dat)
summary(model0)
dat_new <- dat[(cooks.distance(model0)<=0.02)&(hatvalues(model0)<=0.05),]
model1 <- lm(price ~ 0+age + log(distance) + stores + lat + lon, data=dat_new)
summary(model1)
model1 <- lm(price ~ 0+age + log(distance) + stores + lat + lon +date, data=dat_new)
summary(model1)
vif(model1)
vif(model0)
boxcox(model1)
par(mfrow=c(1,1))
boxcox(model1)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date, data=dat_new)
summary(model2)
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat$dcc=distance(dat$lat,dat$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 0+age + log(dcc) + stores + lat + lon +date, data=dat_new)
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 0+age + log(dcc) + stores + lat + lon +date, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores  +date +dcc, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +log(dcc), data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model3 <- glm(store_density~date+age+log(distance)+lat+lon+price,data = dat,family = "poisson")
dat$store_density = cut(dat$stores,c(-1,3,7,10), labels = c('low', 'medium', 'high'))
length(dat$store_density[dat$store_density == 'low'])
length(dat$store_density[dat$store_density == 'medium'])
length(dat$store_density[dat$store_density == 'high'])
sum(is.na(dat))
model3 <- glm(store_density~date+age+log(distance)+lat+lon+price,data = dat,family = "poisson")
summary(model3)
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model3 <- glm(store_density~date+age+log(distance)+lat+lon+price,data = dat,family = "poisson")
summary(model3)
model3 <- glm(store~date+age+log(distance)+lat+lon+price,data = dat,family = "poisson")
model3 <- glm(stores~date+age+log(distance)+lat+lon+price,data = dat,family = "poisson")
summary(model3)
model3 <- glm(stores~date+age+log(distance)+lat+lon+price,data = dat_new,family = "poisson")
summary(model3)
model3 <- glm(stores~date+age+distance+lat+lon+price,data = dat_new,family = "poisson")
summary(model3)
model3 <- glm(stores~date+age+log(distance)+lat+lon+price,data = dat_new,family = "poisson")
summary(model3)
model1 <- lm(price ~ 1+age + log(distance) + stores + lat + lon +date, data=dat_new)
summary(model1)
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
plot(distance, price,data=dat)
plot(dat$distance, dat$price)
plot(dat$distance, dat$price, cex=0.5)
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
dat <- read.csv("data.csv")
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
head(dat)
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
rm(list=ls())  #clear load space
dat <- read.csv("data.csv")
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
head(dat)
dat_new <- dat[(cooks.distance(model0)<=0.02)&(hatvalues(model0)<=0.05),]
model0 <- lm(price ~ age + distance + stores + lat + lon + date, data=dat)
summary(model0)
#stores is a bit wierd
confint(model0, interval='prediction')
dat_new <- dat[(cooks.distance(model0)<=0.02)&(hatvalues(model0)<=0.05),]
model1 <- lm(price ~ 1+age + log(distance) + stores + lat + lon +date, data=dat_new)
summary(model1)
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
dat_new$dcc
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
rm(list=ls())  #clear load space
dat <- read.csv("data.csv")
colnames(dat) <- c("date", "age", "distance", "stores", "lat", "lon", "price")
head(dat)
model0 <- lm(price ~ age + distance + stores + lat + lon + date, data=dat)
summary(model0)
dat_new <- dat[(cooks.distance(model0)<=0.02)&(hatvalues(model0)<=0.05),]
model1 <- lm(price ~ 1+age + log(distance) + stores + lat + lon +date, data=dat_new)
summary(model1)
distance=function(x,y,c){
sqrt((x-c[1])^2+(y-c[2])^2)
}
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(121.54,24.975))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 0+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
dat_new$dcc=distance(dat_new$lat,dat_new$lon,c(24.975, 121.54))
model2 <- lm(price^0.5 ~ 1+age + log(distance) + stores + lat + lon +date +dcc, data=dat_new)
summary(model2)
