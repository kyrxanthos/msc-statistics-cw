read.csv("group11.csv")
setwd("/Users/lysi2/Documents/UNI_Imperial/CompStats/Assignments/Group")
read.csv("group11.csv")
dat <- read.csv("group11.csv")
dat$Y
dat$X2
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
trueA <- 5
trueB <- 0
trueSd <- 10
sampleSize <- 31
# create independent x-values
x <- (-(sampleSize-1)/2):((sampleSize-1)/2)
x
dat <- read.csv("group11.csv")
dat$Y
dat$X1
dat$X2
likelihood <- function(param){
b1 = param[1]
b2 = param[2]
omega = param[3]
pred = b1*dat$X1 + b2*dat$X2
singlelikelihoods = dnorm(dat$Y, mean = pred, sd = omega, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(5,5,1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(1,1,1)
chain = run_metropolis_MCMC(startvalue, 10000)
prior <- function(param){
b1_prior <- rnorm(1,mean=0,sd=5)
b2_prior <- rnorm(1,mean=0,sd=5)
omega_prior <- rgamma(1,1,1)
return(log(b1_prior) +log(b2_prior)+log(omega_prior))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(1,1,1)
chain = run_metropolis_MCMC(startvalue, 10000)
prior <- function(param){
b1_prior <- rnorm(1,mean=0,sd=5)
b2_prior <- rnorm(1,mean=0,sd=5)
omega_prior <- rgamma(1,1,1)
print(b1_prior)
return(log(b1_prior) +log(b2_prior)+log(omega_prior))
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(5,5,1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(1,1,1)
chain = run_metropolis_MCMC(startvalue, 10000)
?rnorm
prior <- function(param){
# b1_prior <- rnorm(1,mean=0,sd=5)
b1_prior <- dnorm(rnorm(1,mean=0,sd=5), mean=param[1],sd=5)
# b2_prior <- rnorm(1,mean=0,sd=5)
b2_prior <- dnorm(rnorm(1,mean=0,sd=5), mean=param[2],sd=5)
# omega_prior <- rgamma(1,1,1)
omega_prior <- dgamma(rgamma(1,1,1), 1,1)
# print(b1_prior)
return(log(b1_prior) +log(b2_prior)+log(omega_prior))
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(5,5,1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(1,1,1)
chain = run_metropolis_MCMC(startvalue, 10000)
likelihood <- function(param){
b1 = param[1]
b2 = param[2]
omega = param[3]
pred = b1*dat$X1 + b2*dat$X2
singlelikelihoods = dnorm(dat$Y, mean = pred, sd = omega, log = T)
print(singlelikelihoods)
sumll = sum(singlelikelihoods)
return(sumll)
}
prior <- function(param){
# b1_prior <- rnorm(1,mean=0,sd=5)
b1_prior <- dnorm(rnorm(1,mean=0,sd=5), mean=param[1],sd=5)
# b2_prior <- rnorm(1,mean=0,sd=5)
b2_prior <- dnorm(rnorm(1,mean=0,sd=5), mean=param[2],sd=5)
# omega_prior <- rgamma(1,1,1)
omega_prior <- dgamma(rgamma(1,1,1), 1,1)
# print(b1_prior)
return(log(b1_prior) +log(b2_prior)+log(omega_prior))
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(5,5,1)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(1,1,1)
chain = run_metropolis_MCMC(startvalue, 10000)
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
## 2) Three-dimensional target density
#########################
data <- read.csv("group11.csv")
f <- function(x) log(1/(x[3]^15))-sum((data[,3]-(x[1]*data[,1]+x[2]*data[,2]))^2)/(2*x[3])-(1/2)*(x[1]^2+x[2]^2)/10-x[3]
x <- c(1,1,1);
n <- 1e3
xall <- matrix(NA,nrow=3,ncol=n+1)
xall[,1] <- x
for(i in 1:500){
epsilon <- rexp(1)
y <- x*epsilon
if (runif(1)<exp(log(f(epsilon*x))-log(f(x)))*(dexp(1/epsilon)/dexp(epsilon))*(1/epsilon)){
x <- y
}
xall[,i+1] <- x
}
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
runif(1)
runif(1)
source("~/Documents/UNI_Imperial/CompStats/Assignments/Group/G.R", echo=TRUE)
## 2) Three-dimensional target density
#########################
dataset <- <- read.csv("group11.csv")
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
## 2) Three-dimensional target density
#########################
dataset <-read.csv("group11.csv")
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
x <- c(1,1,1);
n <- 1e3
xall <- matrix(NA,nrow=3,ncol=n+1)
xall[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall[,i+1] <- x
}
## plot of the resulting joint samples
plot(xall[1,],xall[2,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
plot(xall[2,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
plot(xall[1,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
## trace plots
par(mfrow=c(1,3))
plot(xall[1,], type="l")
plot(xall[2,], type="l")
plot(xall[3,], type="l")
# auto-correlation and acf
effectiveSize(t(xall))
acf(t(xall))
# 3D PLOT
persp(xall[1,], xall[2,], xall[3,], xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade=.4)
## 2) Three-dimensional target density
#########################
dataset <-read.csv("group11.csv")
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
MH <- function(f,q,rq,n,init){
xall <- rep(NA,n)
x <- init
xall[1] <- x
n_acc <- 0 #acceptance rate
for (t in seq(2,n)){
y <- rq(x)
if (runif(1)<=(f(y)*q(y,x))/(f(x)*q(x,y))){
x <- y
n_acc <- n_acc+1
}
xall[t] <- x
}
cat('Acceptance rate: ', n_acc/n)
return(xall)
}
init <- c(1,1,1)
n <- 1e3
set.seed(123)
xall <- MH(f,q,rq,N,1)
N <- 1e3
set.seed(123)
xall <- MH(f,q,rq,N,1)
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall[,i+1] <- x
}
xall
plot(xall)
plot(xall[1,])
MH <- function(f,q,rq,n,init){
xall <- rep(NA,n)
x <- init
xall[1] <- x
n_acc <- 0 #acceptance rate
for (t in seq(2,n)){
y <- rq(x)
if (runif(1)<=(f(y)*q(y,x))/(f(x)*q(x,y))){
x <- y
n_acc <- n_acc+1
}
xall[,t] <- x
}
cat('Acceptance rate: ', n_acc/n)
return(xall)
}
init <- c(1,1,1)
N <- 1e3
set.seed(123)
xall <- MH(f,q,rq,N,1)
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
x <- c(1,1,1);
x <- c(1,1,1);
n <- 1e3
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
x <- c(1,1,1);
n <- 1e3
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[,1])
plot(xall1[,2])
plot(xall[,3])
#1
x <- c(1,1,1);
n <- 1e3
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,])
plot(xall1[2,])
plot(xall[3,])
plot(xall1[1,])
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
#1
x <- c(1,1,1);
n <- 1e3
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,])
plot(xall1[2,])
plot(xall[3,])
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
#1
x <- c(1,1,1);
n <- 1e3
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,], type='l')
plot(xall1[2,], type='l')
plot(xall[3,], type='l')
x <- c(1,1,1);
n <- 1e4
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,], type='l')
plot(xall1[2,], type='l')
plot(xall[3,], type='l')
f<-function(x) -30/2*log(x[3])-sum(dataset$Y-
(x[1]*dataset$X1+x[2]*dataset$X2))/2*x[3]-0.5*(x[1]^2+x[2]^2)/10-x[3]
rq <- function(x) c(x[1]+rnorm(1,mean=0,sd=5),x[2]+rnorm(1,mean=0,sd=5),x[3]*rexp(1,rate=1))
q <- function(x,y) dexp(y[3]/x[3], rate=1)/x[3]
#1
x <- c(1,1,1);
n <- 1e4
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,], type='l')
plot(xall1[2,], type='l')
plot(xall1[3,], type='l')
x <- c(0.5,0.5,0.5);
n <- 1e3
xall2 <- matrix(NA,nrow=3,ncol=n+1)
xall2[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall2[,i+1] <- x
}
lines(xall2[1,],col='red')
lines(xall2[2,],col='red')
lines(xall2[3,],col='red')
#1
x <- c(1,1,1);
n <- 1e4
xall1 <- matrix(NA,nrow=3,ncol=n+1)
xall1[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall1[,i+1] <- x
}
plot(xall1[1,], type='l')
lines(xall2[1,],col='red')
plot(xall1[2,], type='l')
lines(xall2[2,],col='red')
plot(xall1[3,], type='l')
lines(xall2[3,],col='red')
x <- c(0.5,0.5,0.5);
n <- 1e4
xall2 <- matrix(NA,nrow=3,ncol=n+1)
xall2[,1] <- x
for(i in 1:n){
y <- rq(x)
if (runif(1)<f(y)/f(x)*(q(y,x)/q(x,y))){
x <- y
}
xall2[,i+1] <- x
}
plot(xall1[1,], type='l')
lines(xall2[1,],col='red')
plot(xall1[2,], type='l')
lines(xall2[2,],col='red')
plot(xall1[3,], type='l')
lines(xall2[3,],col='red')
par(mfrow=c(1,1))
## plot of the resulting joint samples
plot(xall[1,],xall[2,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
plot(xall[2,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
plot(xall[1,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="x", ylab="y")
## plot of the resulting joint samples
plot(xall[1,],xall[2,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="Y", ylab="X1")
plot(xall[2,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X1", ylab="X2")
plot(xall[1,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="Y", ylab="X2")
plot(xall[2,],xall[1,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X1", ylab="Y")
plot(xall[2,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X1", ylab="X2")
plot(xall[3,],xall[1,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X2", ylab="Y")
par(mfrow=c(1,3))
## plot of the resulting joint samples
plot(xall[2,],xall[1,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X1", ylab="Y")
plot(xall[2,],xall[3,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X1", ylab="X2")
plot(xall[3,],xall[1,],col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16, xlab="X2", ylab="Y")
# 3D PLOT
persp(xall[1,], xall[2,], xall[3,], xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade=.4)
# auto-correlation and acf
effectiveSize(t(xall))
acf(t(xall))
# 3D PLOT
persp(xall[1,], xall[2,], xall[3,], xlab='X Variable', ylab='Y Variable', zlab='Z Variable',
main='3D Plot', col='pink', shade=.4)
