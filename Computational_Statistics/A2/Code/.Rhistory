Zperm <- sample(Z,length(Z))
Trep <- replicate(1e4, T(sample(Z,length(Z)))>=t)
pval <- mean(Trep)
pval
pval+sd(Trep)/sqrt(length(Trep))*qnorm(c(0.025,0.975)) ##Conf Int
#b
k=5
genbootsample <- function(data){
theta_hat <- mean(data)/k
rgamma(length(data), shape=5, scale=theta_hat)
}
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
plot(ecdf(m1))
lines(ecdf(m2),col='red')
T <- function(z) abs(var(z[1:n])-var(z[-(1:m)]))
bootsd(Z,T,1000)
Trep <- replicate(B, {bx <- genbootsample(x);
by <- genbootsample(y);
T(c(bx,by))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
T <- function(z) abs(var(z[1:n])-var(z[-(1:m)]))
bootsd(Z,T,1000)
B <- 1e4
Trep <- replicate(B, {bx <- genbootsample(x);
by <- genbootsample(y);
T(c(bx,by))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
genbootsample <- function(data){
theta_hat <- mean(data)/k
rgamma(length(data), shape=k, scale=theta_hat)
}
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
plot(ecdf(m1))
lines(ecdf(m2),col='red')
set.seed(222)
dat <- read.csv('qu4.csv')
x <- dat$observations[dat$group==1]
y <- dat$observations[dat$group==2]
n <- length(x)
m <- length(y)
T <- function(Z) abs(var(Z[1:n]) - var(Z[(n+1):(n+m)]))
rm(list=ls())  #clear loadspace
set.seed(222)
dat <- read.csv('qu4.csv')
x <- dat$observations[dat$group==1]
y <- dat$observations[dat$group==2]
n <- length(x)
m <- length(y)
T <- function(Z) abs(var(Z[1:n]) - var(Z[(n+1):(n+m)]))
Z <- c(x,y)
t <- T(Z)
Zperm <- sample(Z,length(Z))
Trep <- replicate(1e4, T(sample(Z,length(Z)))>=t)
pval <- mean(Trep)
pval
pval+sd(Trep)/sqrt(length(Trep))*qnorm(c(0.025,0.975)) ##Conf Int
#b
k=5
genbootsample <- function(data){
theta_hat <- mean(data)/k
rgamma(length(data), shape=k, scale=theta_hat)
}
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
plot(ecdf(m1))
lines(ecdf(m2),col='red')
B <- 1e4
Trep <- replicate(B, {bx <- genbootsample(x);
by <- genbootsample(y);
T(c(bx,by))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
Trep <- replicate(B, {T(genbootsample(c(x,y)))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
set.seed(222)
dat <- read.csv('qu4.csv')
x <- dat$observations[dat$group==1]
y <- dat$observations[dat$group==2]
n <- length(x)
m <- length(y)
T <- function(Z) abs(var(Z[1:n]) - var(Z[(n+1):(n+m)]))
Z <- c(x,y)
t <- T(Z)
Zperm <- sample(Z,length(Z))
Trep <- replicate(1e4, T(sample(Z,length(Z)))>=t)
pval <- mean(Trep)
pval
pval+sd(Trep)/sqrt(length(Trep))*qnorm(c(0.025,0.975)) ##Conf Int
#b
k=5
genbootsample <- function(data){
theta_hat <- mean(data)/k
rgamma(length(data), shape=k, scale=theta_hat)
}
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
plot(ecdf(m1))
lines(ecdf(m2),col='red')
# bootsd <- function(data,T,nrep){
#   replicate(nrep,T(genbootsample(data)))
# }
# T <- function(z) abs(var(z[1:n])-var(z[-(1:m)]))
B <- 1e4
# Trep <- replicate(B, {bx <- sample(Z, n,replace=TRUE);
#                       by <- sample(Z, m,replace=TRUE);
#                       T(c(bx,by))})
# Trep <- replicate(B, {bx <- genbootsample(x);
#                       by <- genbootsample(y);
#                       T(c(bx,by))})
Trep <- replicate(B, {T(genbootsample(c(x,y)))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
rm(list=ls())  #clear loadspace
setwd("/Users/lysi2/Documents/UNI_Imperial/CompStats/Assignments/A2/Code")
library(markovchain)
library(MASS)
set.seed(222)
a=4
b=1
rnorm?
?
?rnorm
A1 <- function(y) rnorm(1, mean=(a+b)*y/(1+2*y), sd=1/(1+2*y))
A2 <- function(x) rgamma(1, shape=3/2, rate=1/2*(1+(a-x)^2+(b-x)^2))
n <- 1e4
xall <- matrix(NA,ncol=2, nrow=n)
x <- c(0,0)
xall[1,] <- x
for (t in seq(2,n)){
x[1] <- A1(x[2])
x[2] <- A2(x[1])
xall[t,]<-x
}
xall
count = 0
for (i in 1:dim(xall)[1]){
if ((xall[i,1] <= 1 & xall[i,1] >=-1 ) & (xall[i,2] <= 0.5 & xall[i,2] >=0)){
count = count + 1
}
}
count/n
mean(xall[,1]^2)
plot(xall[1,], xall[2,], col=rgb(red=0, green=0, blue=1, alpha=0.14),
xlab='x', ylab= 'y')
plot(xall[,1], xall[,2], col=rgb(red=0, green=0, blue=1, alpha=0.14),
xlab='x', ylab= 'y')
plot(xall[,1], xall[,2], col=rgb(red=0, green=0, blue=1, alpha=0.14),
xlab='x', ylab= 'y', ylim=c(-2.5,2.5))
set.seed(222)
a=4
b=1
# A1 <- function(y) rnorm(1, mean=(a+b)*y/(1+2*y), sd=1/(1+2*y))
A1 <- function(y) ifelse(y>=0, rnorm(1, mean=(a+b)*y/(1+2*y),
sd=1/(1+2*y)),0)
A2 <- function(x) rgamma(1, shape=3/2, rate=1/2*(1+(a-x)^2+(b-x)^2))
n <- 1e4
xall <- matrix(NA,ncol=2, nrow=n)
x <- c(0,0)
xall[1,] <- x
for (t in seq(2,n)){
x[1] <- A1(x[2])
x[2] <- A2(x[1])
xall[t,]<-x
}
count = 0
for (i in 1:dim(xall)[1]){
if ((xall[i,1] <= 1 & xall[i,1] >=-1 ) & (xall[i,2] <= 0.5 & xall[i,2] >=0)){
count = count + 1
}
}
count/n
mean(xall[,1]^2)
plot(xall[,1], xall[,2], col=rgb(red=0, green=0, blue=1, alpha=0.14),
xlab='x', ylab= 'y', ylim=c(-2.5,2.5))
set.seed(222)
a=4
b=1
# A1 <- function(y) rnorm(1, mean=(a+b)*y/(1+2*y), sd=1/(1+2*y))
A1 <- function(y) ifelse(y>=0, rnorm(1, mean=(a+b)*y/(1+2*y),
sd=1/(1+2*y)),0)
A2 <- function(x) rgamma(1, shape=3/2, rate=1/2*(1+(a-x)^2+(b-x)^2))
n <- 2000
xall <- matrix(NA,ncol=2, nrow=n)
x <- c(0,0)
xall[1,] <- x
for (t in seq(2,n)){
x[1] <- A1(x[2])
x[2] <- A2(x[1])
xall[t,]<-x
}
count = 0
for (i in 1:dim(xall)[1]){
if ((xall[i,1] <= 1 & xall[i,1] >=-1 ) & (xall[i,2] <= 0.5 & xall[i,2] >=0)){
count = count + 1
}
}
count/n
mean(xall[,1]^2)
plot(xall[,1], xall[,2], col=rgb(red=0, green=0, blue=1, alpha=0.14),
xlab='x', ylab= 'y', ylim=c(-2.5,2.5))
rm(list=ls())  #clear loadspace
set.seed(222)
dat <- read.csv('qu4.csv')
x <- dat$observations[dat$group==1]
y <- dat$observations[dat$group==2]
n <- length(x)
m <- length(y)
T <- function(Z) abs(var(Z[1:n]) - var(Z[(n+1):(n+m)]))
Z <- c(x,y)
t <- T(Z)
Zperm <- sample(Z,length(Z))
Trep <- replicate(1e4, T(sample(Z,length(Z)))>=t)
pval <- mean(Trep)
pval
pval+sd(Trep)/sqrt(length(Trep))*qnorm(c(0.025,0.975)) ##Conf Int
#b
k=5
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
#b
k=5
genbootsample <- function(data){
theta_hat <- mean(data)/k
rgamma(length(data), shape=k, scale=theta_hat)
}
m1 <- replicate(1000,genbootsample(x))
m2 <- replicate(1000,genbootsample(y))
plot(ecdf(m1))
lines(ecdf(m2),col='red')
legend('bottomright', legend=c('Group 1 Distribution',
'Group 2 Distribution'), col=c(1,2), lty=1:2, cex=1)
plot(ecdf(m1))
lines(ecdf(m2),col='red')
legend('bottomright', legend=c('Group 1 Distribution',
'Group 2 Distribution'), col=c(1,2), lty=1:2, cex=0.7)
plot(ecdf(m1), main='')
lines(ecdf(m2),col='red')
legend('bottomright', legend=c('Group 1 Distribution',
'Group 2 Distribution'), col=c(1,2), lty=1:2, cex=0.7)
B <- 1e4
#this works!
Trep <- replicate(B, {T(genbootsample(c(x,y)))})
pval_boot <- mean(c(Trep, t)>=t)
pval_boot
rm(list=ls())  #clear loadspace
set.seed(222)
X <- c(-0.71, -1.30, -0.13, -2.03, 1.62, 2.38, 0.48, 0.51, -0.69, -2.32, -2.02,
1.23, -0.25, 0.76, 0.65)
#two sided interval
two_sided_boot <- function(X,b,alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
T(bX)-T(X)
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-cstar[2], T(X)-cstar[1]))
}
stud_two_sided_boot <- function(X,b, alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
(T(bX)-T(X))/(sdT(bX))
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-sdT(X)*cstar[2],
T(X)-sdT(X)*cstar[1]))
}
T <- function(x) mean(cos(x))
sdT <- function(x) sd(cos(x))/sqrt(length(x))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
r <- function(n){rt(n,4)}
##work out correct value
mean(cos(r(1e6)))#with Monte Carlo
ff <- function(x) cos(x)*gamma(5/3)/(sqrt(4*pi)*gamma(2))*(1+(x^2)/4)^(-5/2)
trueres <- integrate(ff,-Inf,Inf)$value
trueres #with Numerical integration
r <- function(n){rt(n,4)}
##work out correct value
mean(cos(r(1e6)))#with Monte Carlo
ff <- function(x) cos(x)*gamma(5/3)/(sqrt(4*pi)*gamma(2))*(1+(x^2)/4)^(-5/2)
trueres <- integrate(ff,-Inf,Inf)$value
trueres #with Numerical integration
n <- 15
# n <- 100
CI_bootnp <- replicate(500,two_sided_boot(r(n),1e3, alpha))
mean((CI_bootnp[1,]<=trueres) &(CI_bootnp[2,]>=trueres))
CI_bootnp_stud<- replicate(500,stud_two_sided_boot(r(n),1e3,alpha))
mean((CI_bootnp_stud[1,]<=trueres) &(CI_bootnp_stud[2,]>=trueres))
#FOR PART C
T <- function(x) median(cos(x))
n <- 15
# n <- 100
CI_bootnp <- replicate(500,two_sided_boot(r(n),1e3, alpha))
mean((CI_bootnp[1,]<=trueres) &(CI_bootnp[2,]>=trueres))
two_sided_boot(X,b,alpha)
#FOR PART C
T <- function(x) median(cos(x))
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
rm(list=ls())  #clear loadspace
set.seed(222)
X <- c(-0.71, -1.30, -0.13, -2.03, 1.62, 2.38, 0.48, 0.51, -0.69, -2.32, -2.02,
1.23, -0.25, 0.76, 0.65)
#two sided interval
two_sided_boot <- function(X,b,alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
T(bX)-T(X)
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-cstar[2], T(X)-cstar[1]))
}
stud_two_sided_boot <- function(X,b, alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
(T(bX)-T(X))/(sdT(bX))
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-sdT(X)*cstar[2],
T(X)-sdT(X)*cstar[1]))
}
# C
T <- function(x) median(cos(x))
sdT <- function(x) sd(median(cos(x)))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
b=10000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
b=100
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
rm(list=ls())  #clear loadspace
setwd("/Users/lysi2/Documents/UNI_Imperial/CompStats/Assignments/A2/Code")
set.seed(222)
X <- c(-0.71, -1.30, -0.13, -2.03, 1.62, 2.38, 0.48, 0.51, -0.69, -2.32, -2.02,
1.23, -0.25, 0.76, 0.65)
#two sided interval
two_sided_boot <- function(X,b,alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
T(bX)-T(X)
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-cstar[2], T(X)-cstar[1]))
}
stud_two_sided_boot <- function(X,b, alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
(T(bX)-T(X))/(sdT(bX))
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-sdT(X)*cstar[2],
T(X)-sdT(X)*cstar[1]))
}
T <- function(x) mean(cos(x))
sdT <- function(x) sd(cos(x))/sqrt(length(x))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
r <- function(n){rt(n,4)}
##work out correct value
mean(cos(r(1e6)))#with Monte Carlo
ff <- function(x) cos(x)*gamma(5/3)/(sqrt(4*pi)*gamma(2))*(1+(x^2)/4)^(-5/2)
trueres <- integrate(ff,-Inf,Inf)$value
trueres #with Numerical integration
trueres <- mean(cos(r(1e6)))
n <- 15
# n <- 100
CI_bootnp <- replicate(500,two_sided_boot(r(n),1e3, alpha))
mean((CI_bootnp[1,]<=trueres) &(CI_bootnp[2,]>=trueres))
CI_bootnp_stud<- replicate(500,stud_two_sided_boot(r(n),1e3,alpha))
mean((CI_bootnp_stud[1,]<=trueres) &(CI_bootnp_stud[2,]>=trueres))
# C
T <- function(x) median(cos(x))
sdT <- function(x) sd(median(cos(x)))
b=100
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
n <- 15
b <- boot(data = X,statistic = function(x,i) median(cos(x[i])),R = 1000)
library(boot)
b <- boot(data = X,statistic = function(x,i) median(cos(x[i])),R = 1000)
boot.ci(b)
?boot.ci
b <- boot(data = X,statistic = function(x,i) mean(cos(x[i])),R = 1000)
boot.ci(b)
# C
T <- function(x) median(cos(x))
sdT <- function(x) sd(median(cos(x)))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
cos(X)
median(cos(X))
B=10
for (i in range(1:b)){
bX <- sample(X,replace=TRUE)
for (j in range(1:100)){
T[j] <- median(cos(bX[j]))
print(T[j])
}
}
T <- c()
for (i in range(1:b)){
bX <- sample(X,replace=TRUE)
for (j in range(1:100)){
print
T[j] <- median(cos(bX[j]))
print(T[j])
}
}
for (i in range(1:b)){
bX <- sample(X,replace=TRUE)
for (j in range(1:100)){
print(cos(bX[j]))
T[j] <- median(cos(bX[j]))
print(T[j])
}
}
# C
T <- function(x) median(cos(x))
sdT <- function(x) sd(median(cos(x)))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
cos(x)
cos(X)
median(cos(X))
r <- function(n){rt(n,4)}
##work out correct value
mean(cos(r(1e6)))#with Monte Carlo
ff <- function(x) cos(x)*gamma(5/3)/(sqrt(4*pi)*gamma(2))*(1+(x^2)/4)^(-5/2)
trueres <- integrate(ff,-Inf,Inf)$value
trueres <- mean(cos(r(1e6)))
n <- 15
# n <- 100
CI_bootnp <- replicate(500,two_sided_boot(r(n),1e3, alpha))
print(trueres)
set.seed(222)
X <- c(-0.71, -1.30, -0.13, -2.03, 1.62, 2.38, 0.48, 0.51, -0.69, -2.32, -2.02,
1.23, -0.25, 0.76, 0.65)
rm(list=ls())  #clear loadspace
set.seed(222)
X <- c(-0.71, -1.30, -0.13, -2.03, 1.62, 2.38, 0.48, 0.51, -0.69, -2.32, -2.02,
1.23, -0.25, 0.76, 0.65)
#two sided interval
two_sided_boot <- function(X,b,alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
T(bX)-T(X)
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-cstar[2], T(X)-cstar[1]))
}
stud_two_sided_boot <- function(X,b, alpha){
bootsamples <- replicate(b,{
bX <- sample(X,replace=TRUE)
(T(bX)-T(X))/(sdT(bX))
})
cstar <- quantile(bootsamples,c(alpha/2,1-alpha/2))
return(c(T(X)-sdT(X)*cstar[2],
T(X)-sdT(X)*cstar[1]))
}
T <- function(x) mean(cos(x))
sdT <- function(x) sd(cos(x))/sqrt(length(x))
b=1000
alpha = 0.05
set.seed(1222)
two_sided_boot(X,b,alpha)
stud_two_sided_boot(X,b,alpha)
r <- function(n){rt(n,4)}
##work out correct value
mean(cos(r(1e6)))#with Monte Carlo
ff <- function(x) cos(x)*gamma(5/3)/(sqrt(4*pi)*gamma(2))*(1+(x^2)/4)^(-5/2)
trueres <- integrate(ff,-Inf,Inf)$value
trueres <- mean(cos(r(1e6)))
n <- 15
# n <- 100
CI_bootnp <- replicate(500,two_sided_boot(r(n),1e3, alpha))
mean((CI_bootnp[1,]<=trueres) &(CI_bootnp[2,]>=trueres))
CI_bootnp_stud<- replicate(500,stud_two_sided_boot(r(n),1e3,alpha))
mean((CI_bootnp_stud[1,]<=trueres) &(CI_bootnp_stud[2,]>=trueres))
library(boot)
b <- boot(data = X,statistic = function(x,i) mean(cos(x[i])),R = 1000)
boot.ci(b)
b <- boot(data = X,statistic = function(x,i) median(cos(x[i])),R = 1000)
boot.ci(b)
