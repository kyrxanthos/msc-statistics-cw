y
y=dat[1, 15]
y
y=dat[1, ]
y
y=dat[2, ]
y
y=dat[3, ]
y
y=dat[, 1]
y
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
y=dat[, 1]
y
y=dat[, 1]
y
y=dat[1,]
y
knitr::opts_chunk$set(echo = TRUE)
dat=read.table("data_practical2.txt",header=TRUE,stringsAsFactors=FALSE)
library(lars)
x=data.matrix(dat[,2:11])
#10 variables included to simplify the visualisations
y=dat[,1]
print(y)
l1=lars(x,y,type="lasso")
l1
library(lars)
x=data.matrix(dat[,2:11])
#10 variables included to simplify the visualisations
y=dat[,1]
print(shape(x))
library(lars)
x=data.matrix(dat[,2:11])
#10 variables included to simplify the visualisations
y=dat[,1]
print(x.shape)
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
y=dat[1,]
y
y=dat[2,]
y
dat[3,]
dat[,2]
dat[,2]
dat[,0]
dat[,1]
length(dat[,1])
length(dat[,2])
length(dat[,500])
length(dat[,1900])
length(dat[,900])
length(dat[,1])
length(dat[,1])
dat[,1]
dat[,2]
dat[,3]
dat[,1]
length(data)
X = data.matrix(dat[,3:100])
X
ncol(dat)
ncol(dat) - 2
X = data.matrix(dat[,3:ncol(dat) - 2])
X
X = data.matrix(dat[,3:100])
X
X = data.matrix(dat[,3:101])
X
X = data.matrix(dat[,3:201])
X
X = data.matrix(dat[,3:1000])
X
X = data.matrix(dat[,3:10])
shape(X)
nrow((X))
ncol((X))
X = data.matrix(dat[,3:ncol(dat) - 2])
ncol((X))
summary(X)
ncol((X))
ncol((dat))
is.na(X)
length(which(is.na(X)))
length(which(!is.na(X)))
which(is.na(y))
dat[-c(no_response), ]
no_response = which(is.na(y))
dat[-c(no_response), ]
nrow(dat)
nrow(dat[-c(no_response), ])
length(which(is.na(x)))
length(which(is.na(X)))
rowSums(is.na(dat))
rowSums(is.na(dat)).values
length(rowSums(is.na(dat)))
rowSums(is.na(dat))[0]
rowSums(is.na(dat))[1]
rowSums(is.na(dat))[2]
rowSums(is.na(dat))[3]
rowSums(is.na(dat))[36]
rowSums(is.na(dat))[56]
rowSums(is.na(dat))[76]
rowSums(is.na(dat))[176]
apply(dat, 1, function(x) sum(is.na(x)))
c(apply(df, 1, function(x) sum(is.na(x))))
q = rowSums(is.na(dat))
length(which(q<=5))
length(which(q>=5))
length(which(q>=10))
which(q>=10)
K = 0.05 * ncol(X)
K
integer(K)
int(K)
q = rowSums(is.na(dat))
K = 0.05 * ncol(X)
missing_genotypes = which(q >= K)
missing_genotypes
q = rowSums(is.na(dat))
q
which(q>=10)
K
which(q >= 51)
which(q>=51)
which(q>=10)
which(q>=20)
which(q>=30)
which(q>=40)
which(q>=50)
which(q>=40)
which(q>=3)
which(q>=40)
which(q>=51)
which(q>=4)
which(q>=45)
which(q>=46)
which(q>=45)
q = rowSums(is.na(dat))
# 5% of the existing SNPs
K = 45
missing_genotypes = which(q >= K)
dat = dat[, -c(missing_genotypes)]
nrow(dat)
dat = dat[-c(no_response), ]
nrow(dat)
dat = dat[-c(no_response), ]
nrow(dat)
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
print(nrow(dat))
y = dat[,1]
E = dat[,2]
X = data.matrix(dat[,3:ncol(dat) - 2])
no_response = which(is.na(y))
q = rowSums(is.na(dat))
# 5% of the existing SNPs
K = 45
missing_genotypes = which(q >= K)
dat = dat[-c(no_response), ]
dat = dat[, -c(missing_genotypes)]
print(nrow(dat))
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
print(nrow(dat))
y = dat[,1]
E = dat[,2]
X = data.matrix(dat[,3:ncol(dat) - 2])
no_response = which(is.na(y))
print(no_response)
q = rowSums(is.na(dat))
# 5% of the existing SNPs
K = 45
missing_genotypes = which(q >= K)
print(missing_genotypes)
dat = dat[-c(no_response), ]
dat = dat[-c(missing_genotypes),]
print(nrow(dat))
ncol(dat)
ncol(dat[,-1])
ncol(dat)
colSums(is.na(dat[,-2]))
ncol(dat[,-1])
ncol(dat[,-2])
q1 = colSums(is.na(dat[,-2]))
which(q1 >= K1)
# 5% of cols
K1 = ncol(dat) * 0.05
which(q1 >= K1)
setwd("/Users/lysi2/Documents/UNI_Imperial/Genetics_Bio/Courseworks/CW1")
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
print(nrow(dat))
print(ncol(dat))
y = dat[,1]
E = dat[,2]
X = data.matrix(dat[,3:ncol(dat) - 2])
no_response = which(is.na(y))
q = rowSums(is.na(dat))
q1 = colSums(is.na(dat[,-1]))
# 5% of the existing SNPs
K = 45
# 5% of cols
K1 = ncol(dat) * 0.05
missing_genotypes = which(q >= K)
missing_snps = which(q1 >= K1)
dat = dat[-c(no_response), ]
dat = dat[-c(missing_genotypes),]
dat = dat [, -c(missing_snps)]
print(nrow(dat))
print(ncol(dat))
which(X ==2)
length(which(X ==2))
length(which(X ==1))
length(which(X ==0))
length(which(X ==0)) + length(which(X ==1)) + length(which(X ==2))
which(X.col ==1)
library(dplyr, warn.conflicts = FALSE)
?across
sapply(names(dat1[,3:ncol(dat)]), MAF)
MAF <- function(col_snp){
x2 <- (sum(dat1[col_snp]==2, na.rm = TRUE))*2
x1 <- sum(dat1[col_snp]==1, na.rm = TRUE)
x0 <- sum(dat1[col_snp]==0, na.rm = TRUE)
return((x2+x1)/((x0 + x1 + x2)*2))
}
sapply(names(dat1[,3:ncol(dat)]), MAF)
sapply(names(dat[,3:ncol(dat)]), MAF)
MAF <- function(col_snp){
x2 <- (sum(dat[col_snp]==2, na.rm = TRUE))*2
x1 <- sum(dat[col_snp]==1, na.rm = TRUE)
x0 <- sum(dat[col_snp]==0, na.rm = TRUE)
return((x2+x1)/((x0 + x1 + x2)*2))
}
sapply(names(dat[,3:ncol(dat)]), MAF)
which(sapply(names(dat[,3:ncol(dat)]), MAF) >=0.05)
len(which(sapply(names(dat[,3:ncol(dat)]), MAF) >=0.05))
length(which(sapply(names(dat[,3:ncol(dat)]), MAF) >=0.05))
length(which(sapply(names(dat[,3:ncol(dat)]), MAF) <=0.05))
print(ncol(dat))
low_maf = which(sapply(names(dat[,3:ncol(dat)]), MAF) <=0.05)
dat = dat[, -c(low_maf)]
print(ncol(dat))
all_MAF = sapply(names(dat[,3:ncol(dat)]), MAF)
all_MAF
length(all_MAF)
nrow(all_MAF)
ncol(all_MAF)
names(all_MAF)
all_MAF
(1-all_MAF)^2
all_MAF
(1-all_MAF)^2
dat[dat["rs13897411021"] == 0]
length(dat[dat["rs13897411021"] == 0])
rm(list=ls())  #clear loadspace
library(lars)
library(dplyr, warn.conflicts = FALSE)
dat=read.table("data_1389741.txt",header=TRUE,stringsAsFactors=FALSE)
print(nrow(dat))
print(ncol(dat))
y = dat[,1]
E = dat[,2]
X = data.matrix(dat[,3:ncol(dat)])
no_response = which(is.na(y))
q = rowSums(is.na(dat))
q1 = colSums(is.na(dat[,-1]))
# 5% of the existing SNPs
K = 45
# 5% of cols
K1 = ncol(dat) * 0.05
missing_genotypes = which(q >= K)
missing_snps = which(q1 >= K1)
dat = dat[-c(no_response), ]
dat = dat[-c(missing_genotypes),]
dat = dat [, -c(missing_snps)]
print(nrow(dat))
print(ncol(dat))
MAF <- function(col_snp){
x2 <- (sum(dat[col_snp]==2, na.rm = TRUE))*2
x1 <- sum(dat[col_snp]==1, na.rm = TRUE)
x0 <- sum(dat[col_snp]==0, na.rm = TRUE)
return((x2+x1)/((x0 + x1 + x2)*2))
}
all_MAF = sapply(names(dat[,3:ncol(dat)]), MAF)
low_maf = which(all_MAF <=0.05)
dat = dat[, -c(low_maf)]
print(ncol(dat))
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(X_squared)
}
all_X_squared <-sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
all_X_squared[2]
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(maf, X_squared)
}
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(maf, X_squared)
}
alls = sapply(names(dat[,3:ncol(dat)]), HWE)
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(list(maf, X_squared))
}
alls = sapply(names(dat[,3:ncol(dat)]), HWE)
alls[0]
alls[1]
alls[2]
alls[3]
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(X_squared)
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
# return(X_squared)
return((n_major - ET_AA)^2 / ET_AA)
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
length(all_X_squared)
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
# return(X_squared)
return((n_mixed - ET_AT)^2 / ET_AT )
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
# return(X_squared)
return((n_minor - ET_TT)^2 / ET_TT)
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * maf * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
# return(X_squared)
return((n_mixed - ET_AT)^2 / ET_AT )
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * maf * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = (n_major - ET_AA)^2 / ET_AA + (n_mixed - ET_AT)^2 / ET_AT +
(n_minor - ET_TT)^2 / ET_TT
return(X_squared)
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
all_X_squared
?chisq.test
qchisq(.95, df=1)
no_hwe = which(all_X_squared >= qchisq(.95, df=1))
no_hwe
length(no_hwe)
length(all_X_squared)
all_X_squared
qchisq(.95, df=1)
no_hwe = which(all_X_squared >= 5)
length(no_hwe)
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
qchisq(.95, df=1)
no_hwe = which(all_X_squared >= 5)
length(no_hwe)
no_hwe = which(all_X_squared >= 10)
length(no_hwe)
no_hwe = which(all_X_squared >= 15)
length(no_hwe)
HWE <- function(col_snp){
n_minor = sum(dat[col_snp]==2, na.rm = TRUE)
n_mixed = sum(dat[col_snp]==1, na.rm = TRUE)
n_major = sum(dat[col_snp]==0, na.rm = TRUE)
x2 <- (n_minor)*2
x1 <- n_mixed
x0 <- n_major
# x0 <- sum(dat[col_snp]==0, na.rm = TRUE) - nrow(dat) * (1-all_MAF)^2
maf = (x2+x1)/((x0 + x1 + x2)*2)
ET_AA = nrow(dat) * (1-maf)^2
ET_AT = nrow(dat) * 2 * maf * (1-maf)
ET_TT = nrow(dat) * maf^2
X_squared = ((n_major - ET_AA)^2 / ET_AA) + ((n_mixed - ET_AT)^2 / ET_AT) +
((n_minor - ET_TT)^2 / ET_TT)
return(X_squared)
}
all_X_squared = sapply(names(dat[,3:ncol(dat)]), HWE)
qchisq(.95, df=1)
no_hwe = which(all_X_squared >= 15)
length(no_hwe)
length(low_maf)
no_hwe = which(all_X_squared >= 150)
length(no_hwe)
no_hwe
